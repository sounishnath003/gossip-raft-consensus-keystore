// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: example-usage/realtime-leaderboard/proto/leaderboard.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardClient is the client API for Leaderboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardClient interface {
	// UpdateScore adds or updates a player's score.
	UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*UpdateScoreResponse, error)
	// GetLeaderboard retrieves the top players for a leaderboard.
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
}

type leaderboardClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardClient(cc grpc.ClientConnInterface) LeaderboardClient {
	return &leaderboardClient{cc}
}

func (c *leaderboardClient) UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*UpdateScoreResponse, error) {
	out := new(UpdateScoreResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.Leaderboard/UpdateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.Leaderboard/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardServer is the server API for Leaderboard service.
// All implementations must embed UnimplementedLeaderboardServer
// for forward compatibility
type LeaderboardServer interface {
	// UpdateScore adds or updates a player's score.
	UpdateScore(context.Context, *UpdateScoreRequest) (*UpdateScoreResponse, error)
	// GetLeaderboard retrieves the top players for a leaderboard.
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	mustEmbedUnimplementedLeaderboardServer()
}

// UnimplementedLeaderboardServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardServer struct {
}

func (UnimplementedLeaderboardServer) UpdateScore(context.Context, *UpdateScoreRequest) (*UpdateScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedLeaderboardServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedLeaderboardServer) mustEmbedUnimplementedLeaderboardServer() {}

// UnsafeLeaderboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardServer will
// result in compilation errors.
type UnsafeLeaderboardServer interface {
	mustEmbedUnimplementedLeaderboardServer()
}

func RegisterLeaderboardServer(s grpc.ServiceRegistrar, srv LeaderboardServer) {
	s.RegisterService(&Leaderboard_ServiceDesc, srv)
}

func _Leaderboard_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.Leaderboard/UpdateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServer).UpdateScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaderboard_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.Leaderboard/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Leaderboard_ServiceDesc is the grpc.ServiceDesc for Leaderboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leaderboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboard.Leaderboard",
	HandlerType: (*LeaderboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateScore",
			Handler:    _Leaderboard_UpdateScore_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _Leaderboard_GetLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example-usage/realtime-leaderboard/proto/leaderboard.proto",
}
